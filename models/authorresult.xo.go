package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// AuthorResult represents a row from 'mydb.author_result'.
type AuthorResult struct {
	UserID    int    `json:"user_id"`    // user_id
	UserName  string `json:"user_name"`  // user_name
	CommentID int    `json:"comment_id"` // comment_id
}

// AuthorResultsByText runs a custom query, returning results as [AuthorResult].
func AuthorResultsByText(ctx context.Context, db DB, text string) ([]*AuthorResult, error) {
	// query
	const sqlstr = `SELECT ` +
		`a.id AS user_id, ` +
		`a.name AS user_name, ` +
		`b.id AS comment_id ` +
		`FROM comments b ` +
		`JOIN users a ON a.id = b.user_id ` +
		`WHERE b.text LIKE CONCAT('%', ?, '%')`
	// run
	logf(sqlstr, text)
	rows, err := db.QueryContext(ctx, sqlstr, text)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*AuthorResult
	for rows.Next() {
		var ar AuthorResult
		// scan
		if err := rows.Scan(&ar.UserID, &ar.UserName, &ar.CommentID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ar)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
